[{"path":"index.html","id":"présentation-de-la-formation","chapter":"Présentation de la formation","heading":"Présentation de la formation","text":"Le principal de cette formation est de vous donner des outils pour\nfaciliter le développement de code (performant) avec . L’aspect “performance”\narrivera dans un deuxième temps, et les premiers outils présentés sont\négalement très utiles dans des situations ne faisant pas intervenir de temps\nde calculs importants.Nous allons centrer la présentation de ces outils de développement autour\nde la notion de package. Vous connaissez déjà cette notion, car vous avez\ndéjà installer des packages depuis le CRAN par exemple. Vous savez également\nque c’est le moyen le plus standard dans  pour\npartager et mettre à disposition du code.\nNous allons vous montrer que le package est également un excellent outil pour\ndévelopper le code.Nous allons adopter le plan suivant :Build R package useful tool code developmentLeverage git tracking changes, GitHub sharing code, collaborative development, automating tests package broadcast companion websiteLeverage git tracking changes, GitHub sharing code, collaborative development, automating tests package broadcast companion websiteConstruire un package  comme outils de développement de codeConstruire un package  comme outils de développement de codeUtiliser git pour tracer les changements, et GitHub pour partager son code, le développement collaboratif, automatiser les tests dans un package et diffuser un site web d’accompagnementUtiliser git pour tracer les changements, et GitHub pour partager son code, le développement collaboratif, automatiser les tests dans un package et diffuser un site web d’accompagnementMesurer le temps de calculMesurer le temps de calculProfiler le codeProfiler le codeUtiliser Rcpp pour optimiser ce qui doit l’êtreUtiliser Rcpp pour optimiser ce qui doit l’êtreParalléliser facilement le codeParalléliser facilement le code","code":""},{"path":"index.html","id":"logiciels-et-librairies-nécessaires-à-la-formation","chapter":"Présentation de la formation","heading":"Logiciels et librairies nécessaires à la formation","text":"Afin de suivre cette formation, il est nécessaire de disposer des logiciels suivants :la dernière version de  (https://cloud.r-project.org/)la dernière version de  (https://cloud.r-project.org/)la dernière version de RStudio (https://posit.co/download/rstudio-desktop/#download)la dernière version de RStudio (https://posit.co/download/rstudio-desktop/#download)un compilateur C++ (tel que gcc ou clang - natif sous les système UNIX,\npour les utilisateurs Windows nous recommandons l’installation de\nRtools, pour les\nutilisateurs Mac il peut être nécessaire d’installer les outils de\ndéveloppement Apple comme indiqué\nici)un compilateur C++ (tel que gcc ou clang - natif sous les système UNIX,\npour les utilisateurs Windows nous recommandons l’installation de\nRtools, pour les\nutilisateurs Mac il peut être nécessaire d’installer les outils de\ndéveloppement Apple comme indiqué\nici)les packages  suivants : devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisles packages  suivants : devtools, future.apply, itertools, microbenchmark, mvtnorm, profvis, Rcpp, RcppArmadillo, roxygen2, testthat, usethisle logiciel gitle logiciel gitle client GitHub Desktople client GitHub Desktop","code":""},{"path":"index.html","id":"pré-requis","chapter":"Présentation de la formation","heading":"Pré-requis","text":"Afin de pouvoir suivre cette formation correctement vous devez être à l’aise avec les aspects suivants :la programation avec  dans l’environnement de développement RStudioécriture de fonctions en structure de contrôle, en particulier les boucles forle calcul de la densité d’une loi normale multivariée","code":""},{"path":"construire-un-package.html","id":"construire-un-package","chapter":"Chapitre 1 Construire un package ","heading":"Chapitre 1 Construire un package ","text":"Nous présentons ici comment construire un package efficacement à l’aide d’outils\ngraphiques présents dans RStudio et du package devtools.Le support de référence sur ce sujet est le livre\nR packages1 d’Hadley Wickham & Jennifer Bryan, disponible en ligne.","code":""},{"path":"construire-un-package.html","id":"initialiser-un-package","chapter":"Chapitre 1 Construire un package ","heading":"1.1 Initialiser un package","text":"Une manière simple, et intégrée à RStudio, pour initialiser un package est d’executer les étapes suivantes :👉 À vous de jouer (déjà)!créer un nouveau projet (menu déroulant en haut à gauche dans RStudio)créer un nouveau projet (menu déroulant en haut à gauche dans RStudio)choisir “New Directory”choisir “New Directory”choisir “R package using devtools” (s’il n’est pas disponible c’est que le package devtools n’est pas installer et dans ce cas peut alors choisir “R package” – la différence étant qu’avec “R package”, il faudra supprimer des fichiers créés automatiquement mais inutiles)choisir “R package using devtools” (s’il n’est pas disponible c’est que le package devtools n’est pas installer et dans ce cas peut alors choisir “R package” – la différence étant qu’avec “R package”, il faudra supprimer des fichiers créés automatiquement mais inutiles)donner un nom au package, par exemple mypkgr.donner un nom au package, par exemple mypkgr.récupère alors la structure minimale pour un package , à savoir :un fichier DESCRIPTION dont les parties Title, Version, Authors@R et\nDescription sont à éditer (d’autres parties pourront être éditer voire\nmême ajouter de manière automatique, comme nous le verrons plus loin)un fichier DESCRIPTION dont les parties Title, Version, Authors@R et\nDescription sont à éditer (d’autres parties pourront être éditer voire\nmême ajouter de manière automatique, comme nous le verrons plus loin)un fichier NAMESPACE qui sera édité automatiquement ultérieurementun fichier NAMESPACE qui sera édité automatiquement ultérieurementun dossier R/ dans lequel va ajouter des fichiers de scripts .Run dossier R/ dans lequel va ajouter des fichiers de scripts .Rdevtools ajoute également trois fichiers facultatifs :.gitignore, relatif à git, outils de contrôle de version que nous verrons en détails dans la partie suivante sur git & GitHub.gitignore, relatif à git, outils de contrôle de version que nous verrons en détails dans la partie suivante sur git & GitHubmypkgr.Rproj qui est un fichier spécifique de RStudio, et permet de définirles caractéristiques et préférences du projet que nous venons de créermypkgr.Rproj qui est un fichier spécifique de RStudio, et permet de définirles caractéristiques et préférences du projet que nous venons de créer.Rbuildignore qui permet d’ignorer certains fichiers au moment où construira le package un peu plus loin (par exemple, le fichier mypkgr.Rproj ne doit pas être inclus dans le package).Rbuildignore qui permet d’ignorer certains fichiers au moment où construira le package un peu plus loin (par exemple, le fichier mypkgr.Rproj ne doit pas être inclus dans le package)","code":""},{"path":"construire-un-package.html","id":"ajouter-une-fonction-exemple-fil-rouge","chapter":"Chapitre 1 Construire un package ","heading":"1.2 Ajouter une fonction : exemple fil rouge","text":"Nous vous proposons de coder la fonction suivante, que nous reprendrons tout au\nlong de la formation :Nous souhaitons calculer la valeur de la densité d’une loi normale multivariée\nsur \\(\\mathbb{R}^p\\) en \\(n\\) points. Notre fonction doit pouvoir s’appliquer pour\nn’importe quelle loi normale multivariée (vecteur de moyennes \\(\\boldsymbol \\mu\\) dans\n\\(\\mathbb{R}^p\\) et matrice de variance-covariance \\(\\boldsymbol\\Sigma\\) d’ordre de \\(p\\) quelconques),\net souhaite pouvoir calculer toutes les valeurs de la densité évaluées\nsur les \\(n\\) points \\(\\mathbf{x}\\) en un seul appel de la fonction.Pour rappel, la fonction de densité d’une loi normale multivariée s’écrit :\n\\[\\displaystyle (2\\pi )^{-p/2}\\det({\\boldsymbol {\\Sigma }})^{-1/2}\\,\\exp \\left(-{\\frac {1}{2}}(\\mathbf {x} -{\\boldsymbol {\\mu }})^{\\mathsf {T}}{\\boldsymbol {\\Sigma }}^{-1}(\\mathbf {x} -{\\boldsymbol {\\mu }})\\right)\\]Vous devez donc créer une fonction mvnpdf() dans un fichier nommé mvnpdf.R\ndans le dossier R/ du package, qui :prend en arguments :\nx une matrice, à \\(n\\) colonnes (les observations) et \\(p\\) lignes\nmean un vecteur de moyennes\nvarcovM une matrice de variance-covariance\nLog un paramètre logique valant TRUE par défaut\nprend en arguments :x une matrice, à \\(n\\) colonnes (les observations) et \\(p\\) lignesx une matrice, à \\(n\\) colonnes (les observations) et \\(p\\) lignesmean un vecteur de moyennesmean un vecteur de moyennesvarcovM une matrice de variance-covariancevarcovM une matrice de variance-covarianceLog un paramètre logique valant TRUE par défautLog un paramètre logique valant TRUE par défautrenvoie une liste contenant la matrice x ainsi qu’un vecteur des images\ndes points de x par la fonction de densité de la variable aléatoire de loi\nnormale multivariée considérée.renvoie une liste contenant la matrice x ainsi qu’un vecteur des images\ndes points de x par la fonction de densité de la variable aléatoire de loi\nnormale multivariée considérée.👉 À vous de jouer !Voici une proposition de fonction que vous pouvez télécharger\nici. ⚠️ ATTENTION ! Si vous cliquez trop vite sur le lien ci-dessous, cela invalidera votre participation à la formation !Pour des conseils lors de la rédaction de code, voir le chapitre\nR code dans R packages (2023) de Wickham & Bryan2.","code":""},{"path":"construire-un-package.html","id":"documenter-une-fonction","chapter":"Chapitre 1 Construire un package ","heading":"1.3 Documenter une fonction","text":"Il est important de bien documenter votre code. Tout projet au moins 2\ndéveloppeurs :vousvousvous dans 6 moisvous dans 6 moisPar égard à votre “futur vous”, soyez sympas et prenez le temps de documenter\nvotre code 😉 !Nous vous conseillons vivement d’utiliser le package roxygen2 pour documenter\nvos packages. L’avantage principal étant d’avoir l’aide d’une fonction dans\nle même fichier que le code définissant cette fonction.👉 À vous de jouer !Commencer par insérer le squelette de l’aide grâce à “Insert Roxygen\nSkeleton” situé dans le menu “Code” ou le sous-menu Baguette magique dans\nla fenêtre de script.Commencer par insérer le squelette de l’aide grâce à “Insert Roxygen\nSkeleton” situé dans le menu “Code” ou le sous-menu Baguette magique dans\nla fenêtre de script.Compléter la documentation en renseignant :\nle titre de la fonction (première ligne)\nla description de ce que fait la fonction (deuxième paragraphe)\nsi vous renseignez un troisième paragraphe, cette partie ira dans la section “Details” de la page d’aide\nla signification des paramètres\nla sortie, après la balise @return\nCompléter la documentation en renseignant :le titre de la fonction (première ligne)le titre de la fonction (première ligne)la description de ce que fait la fonction (deuxième paragraphe)la description de ce que fait la fonction (deuxième paragraphe)si vous renseignez un troisième paragraphe, cette partie ira dans la section “Details” de la page d’aidesi vous renseignez un troisième paragraphe, cette partie ira dans la section “Details” de la page d’aidela signification des paramètresla signification des paramètresla sortie, après la balise @returnla sortie, après la balise @returnGénérer la documentation à l’aide de “Document” dans le menu “” de l’onglet “Build” (ou Ctrl+Shift+D ou devtools::document()). L’effet de cette commande est multiple :\nun dossier man été créé et à l’intérieur, un fichier mvnpdf.Rd été créé et contient les informations de l’aide de la fonction\nle fichier NAMESPACE été modifié\nGénérer la documentation à l’aide de “Document” dans le menu “” de l’onglet “Build” (ou Ctrl+Shift+D ou devtools::document()). L’effet de cette commande est multiple :un dossier man été créé et à l’intérieur, un fichier mvnpdf.Rd été créé et contient les informations de l’aide de la fonctionun dossier man été créé et à l’intérieur, un fichier mvnpdf.Rd été créé et contient les informations de l’aide de la fonctionle fichier NAMESPACE été modifiéle fichier NAMESPACE été modifiéEn cas de bug ou par curiosité ET une fois que vous avez terminé vous pouvez consulter cette proposition.Pour plus de détails sur la documentation de package et les balises\nroxygen2, voir la page\nObject documentation du site d’Hadley.Finissons par évoquer une fonction du package usethis qui initialise une\npage d’aide pour le package dans son ensemble :La page d’aide générée sera alors accessible, une fois le package installé,\nvia :","code":"\nusethis::use_package_doc()\n?mypkgr"},{"path":"construire-un-package.html","id":"tester-le-package-de-manière-intéractive","chapter":"Chapitre 1 Construire un package ","heading":"1.4 Tester le package de manière intéractive","text":"Pour tester le package, vous devez le charger dans R à l’aide de :\ndans l’onglet “Build”, le menu “” puis “Load ” (ou Ctrl+Shift+L ou\ndevtools::load_all()).Vous pouvez alors utiliser votre package directement dans R : consulter\nl’aide de la fonction avec ?mvnpdf et par exemple exécuter les commandes renseignées dans la section exemple de cette page d’aide.Ainsi, lors du développement, vous pouvez :Ajouter/Modifier le code Ajouter/Modifier le code Re-charger le package Ctrl+Shift+LRe-charger le package Ctrl+Shift+LL’essayer dans la consoleL’essayer dans la consoleEt ainsi de suite…Et ainsi de suite…","code":"\n?mvndpf"},{"path":"construire-un-package.html","id":"tester-le-package-de-manière-automatique","chapter":"Chapitre 1 Construire un package ","heading":"1.5 Tester le package de manière automatique","text":"Pour initialiser la fonctionnalité de tests automatiques dans le package, executer la commande suivante :Cette commande induit la création d’un dossier tests qui comprend un fichier testthat.R – à ne pas modifier – et un dossier testthat/ dans lequel va insérer nos tests. Cet outils s’appuie sur la théorie des tests unitaires.Voici par exemple le contenu d’un fichier contenant 2 tests qui devrait s’appeller test-mvnpdf.R à mettre dans le dossier testthat/ (plutôt que de le créer vous-même, vous pouvez simplement utiliser la fonction usethis::use_test() qui créera le fichier pour vous en le plaçant directement au bon endroit) :Pour exécuter ces tests, peut utiliser “Test package” (Ctrl+Shift+T) du menu “” dans l’onglet “Build”, ou alors executer devtools::test() dans la console.L’avantage de ces tests automatiques est qu’ils vont\ns’exécuter à chaque fois qu’effectuera un check du package.Une bonne pratique est d’ajouter un test unitaire à chaque fois qu’un bug est identifié et résolu,\nafin de pouvoir immédiatement identifier et prévenir qu’une erreur identique ne se reproduise dans\nle futur.","code":"\nusethis::use_testthat()\ntest_that(\"correct result for univariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(1.96), Log=FALSE)$y, dnorm(1.96))\n  expect_equal(mvnpdf(x=matrix(c(1.96, -0.5), ncol = 2), Log=FALSE)$y,\n               dnorm(c(1.96, -0.5)))\n})\n\ntest_that(\"correct results for bivariate gaussian\", {\n  expect_equal(mvnpdf(x=matrix(rep(1.96,2), nrow=2, ncol=1), Log=FALSE)$y,\n               mvtnorm::dmvnorm(rep(1.96, 2)))\n})"},{"path":"construire-un-package.html","id":"faire-un-check-du-package","chapter":"Chapitre 1 Construire un package ","heading":"1.6 Faire un check du package","text":"Faire un check signifie vérifier que tout est correct dans le package et fonctionne comme attendu, afin que l package puisse s’installer sans problème sur différents systèmes d’exploitation. Il est impératif de “passer” le R CMD CHECK pour pouvoir déposer un package sur le CRAN.Pour exécuter celui-ci, utiliser “Check” (Ctrl+Shift+E) dans l’onglet “Build”, ou alors executez devtools::check() dans la console.Lors du R CMD CHECK, les tests que nous avons mis au point précédemment sont exécutées. C’est justement l’avantage d’avoir fait ces tests, nous n’avons plus besoin de s’en préoccuper, mais juste de réagir en cas d’erreurs renvoyées.","code":""},{"path":"construire-un-package.html","id":"installer-le-package","chapter":"Chapitre 1 Construire un package ","heading":"1.7 Installer le package","text":"Pour le moment, le package n’existe que dans l’environnement associé au projet Rstudio qu’créé. Pour pouvoir l’utiliser dans R de manière générale, il faut l’installer (comme un package du CRAN par exemple).Pour faire ça, utiliser “Install Restart” Ctrl+Shift+B dans l’onglet “Build” (devtools::install() ou ).Et enfin, vous pouvez configurer le comportement de RStudio pour qu’au moment de l’installation, il documente en même temps le package : aller dans l’onglet “Build”, le menu “” puis “Configure Build Tools…”. Cliquer ensuite sur “Configure” juste à côté de “Generate documentation Roxygen” puis cocher la case “Install Restart”.","code":""},{"path":"construire-un-package.html","id":"annexe-1.1-ajouter-une-méthode-s3","chapter":"Chapitre 1 Construire un package ","heading":"Annexe 1.1 : ajouter une méthode S3","text":"Dans la plupart des packages est amenés à implémenter des méthodes S3,\ntrès souvent pour qu’à partir d’un objet résultat res, puisse exécuter\nprint(res), summary(res), plot(res)…Voici un exemple de méthode plot() qu’peut ajouter dans notre package :⚠️ ATTENTION ! Pour que cette méthode fasse bien ce qu’veut quand \nl’applique au résultat de notre fonction mvnpdf(), il faut déclarer que\nce résultat est de classe mvnpdf.Tester cette fonction, en exécutant l’exemple.N’oubliez pas de réinstaller le package (“Install Restart” ou Ctrl+Shift+B).Consulter le contenu du dossier man et les modifications qui ont été\napportées au fichier NAMESPACE.Voici une proposition de solution : le\nfichier\ncontient le code complet\nde la fonction mvnpdf() et de la méthode plot() associée.","code":"\n#' Plot of the mvnpdf function\n#'\n#' @param x an object of class \\code{mvnpdf} resulting from a call of\n#' \\code{mnvpdf()} function.\n#' @param ... graphical parameters passed to \\code{plot()} function.\n#'\n#' @return Nothing is returned, only a plot is given.\n#' @export\n#'\n#' @examples\n#' pdfvalues <- mvnpdf(x=matrix(seq(-3, 3, by = 0.1), nrow = 1), Log=FALSE)\n#' plot(pdfvalues)\nplot.mvnpdf <- function(x, ...) {\n  plot(x$x, x$y, type = \"l\", ...)\n}"},{"path":"construire-un-package.html","id":"annexe-1.2-soumettre-son-package-au-cran","chapter":"Chapitre 1 Construire un package ","heading":"Annexe 1.2 : soumettre son package au CRAN","text":"Executer les 2 commandes suivantes : devtools::check() puis devtools::submit_cran().Pour plus de détails, voir la procédure recommandée dans Wickham & Bryan (2023)3","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","text":"Nous nous intéressons ici aux solutions proposées par RStudio et GitHub pour le contrôle de version de projets, l’hébergement de vos projets et l’automatisation d’un certain nombre de vérifications garantissant un partage facile de votre code.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"principe-du-contrôle-de-version","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.1 Principe du contrôle de version","text":"Le principe du contrôle de version est d’enregistrer les changements successifs apportés à des fichiers (notamment des fichiers .R).RStudio propose 2 solutions intégrées pour le contrôle de version :gitgitsvn (“subversion”)svn (“subversion”)","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"git","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.1.1 git","text":"git est un logiciel de contrôle de version (c’est-à-dire un outils qui va\nenregistrer l’histoire des changements successifs de votre code et permettre de\npartager ces changements avec d’autres personnes). git est un logiciel en\nligne de commande, et sa prise en main n’est pas nécessairement intuitive.git fonctionne de la façon suivante : sur un serveur distant (par exemple dans le cloud), une version à jour du code est disponible. À tout moment il est possible d’accéder à cette version du code en ligne. Chaque contributeur peut télécharger cette dernière version à jour (dans une action que l’dénomme pull), avant de l’éditer localement. Une fois ses changements effectués, le contributeur peut alors mettre à jour la version en ligne du code afin que ses changements soient disponibles pour tout le monde (dans une action que l’dénomme push)NB : git été pensé pour des fichiers légers (comme par exemple des\nfichiers texte) et est loin d’être optimisé pour des fichiers trop lourds et/où compressés.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"subversion","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.1.2 subversion","text":"subversion est l’autre solution disponible dans RStudio. Elle fonctionne de manière similaire à git, mais avec des fonctionnalités un peu plus réduites\nque nous détaillons pas ici (la différence majeure est que tout les contributeurs travaillent simultanément sur la même version du code).","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"utiliser-git-localement-depuis-rstudio","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.2 Utiliser git localement depuis RStudio","text":"👉 À vous de jouer !Commencer par activer git depuis l’onglet “Git/SVN” de “Project Options”\nsitué dans le menu “Tools” et suivre les instructions. Vous pouvez aussiplutôt utiliser usethis::use_git()Commencer par activer git depuis l’onglet “Git/SVN” de “Project Options”\nsitué dans le menu “Tools” et suivre les instructions. Vous pouvez aussiplutôt utiliser usethis::use_git()À partir de l’onglet “Git” maintenant apparu à côté de l’onglet “Build”,\nenregistrer l’état actuel de votre package en réalisant votre premier “commit” :À partir de l’onglet “Git” maintenant apparu à côté de l’onglet “Build”,\nenregistrer l’état actuel de votre package en réalisant votre premier “commit” :2a. sélectionner les fichiers à suivre (ne pas sélectionner le fichier .Rproj)2a. sélectionner les fichiers à suivre (ne pas sélectionner le fichier .Rproj)2b. écrire un message informatif (pour vos collaborateurs - ce qui inclut votre futur vous)2b. écrire un message informatif (pour vos collaborateurs - ce qui inclut votre futur vous)2c. cliquer sur “Commit”2c. cliquer sur “Commit”Ajouter une ligne “*.Rproj” au fichier “.gitignore” et effectuez un nouveau commitAjouter une ligne “*.Rproj” au fichier “.gitignore” et effectuez un nouveau commitVisualiser les changements et leur historique à l’aide des outils de visualisation\n“Diff” et “History” accessible depuis l’onglet “Git”Visualiser les changements et leur historique à l’aide des outils de visualisation\n“Diff” et “History” accessible depuis l’onglet “Git”","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"bonnes-pratiques-du-commit","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.2.1 Bonnes pratiques du commit","text":"Idéalement, chaque commit ne devrait régler qu’un seul problème. Il devrait le régler dans son intégralité (être complet) et ne contenir des changements relatifs qu’uniquement à ce problème (être minimal). Il est alors important d’écrire des messages de commit informatifs (pensez à vos collaborateur, qui incluent votre futur vous). Il faut également être concis, et décrire les raisons des changements plutôt que\nles changements eux-mêmes (visibles dans le Diff).NB : Il est parfois difficile de respecter ces directives à la lettre, et celles-ci ne sont qu’un guide et ne doivent pas vous empêcher d’effectuer des commits réguliers.Par ailleurs, la tentation d’avoir un historique de changements “propre” et bien ordonné est naturelle, mais se révèle une source de problèmes inutiles. Elle entre en contradiction avec l’objectif de traçabilité du contrôle de version. Le développement de code étant généralement un processus intellectuel complexe et non linéaire, il est normal que l’enregistrement des changements reflète ce cheminement. En pratique, votre futur-vous sera le premier utilisateur de votre historique de changements et la priorité est donc de vous faciliter la tache dans le futur lors de la résolution de bug où l’extension de fonctionnalités.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"github","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.3 GitHub","text":"GitHub est un site internet proposant une solution\nd’hébergement de code en ligne, et s’appuyant sur git. Il existe de nombreux\nsites web et services (GitLab, Bitbucket, …) permettant d’héberger du code et\ns’appuyant sur git. GitHub est très populaire dans la communauté des\ndéveloppeurs , et est relativement facile à utiliser, même pour un\nutilisateur novice.Les avantages d’utiliser GitHub sont :une interface graphique simple pour suivre l’historique des changements de votre codeune interface graphique simple pour suivre l’historique des changements de votre codela dernière version de développement de votre code est disponible en ligne et vous pouvez la\nréférencer (peut même référencer un numéro de commit précis pour geler une version spécifique\ndu code)la dernière version de développement de votre code est disponible en ligne et vous pouvez la\nréférencer (peut même référencer un numéro de commit précis pour geler une version spécifique\ndu code)les utilisateurs disposent d’un canal clair et transparent pour signaler les bugs/difficultésles utilisateurs disposent d’un canal clair et transparent pour signaler les bugs/difficultéscela facilite grandement le développement collaboratifcela facilite grandement le développement collaboratif","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"mettre-son-package-sur-github","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.3.1 Mettre son package  sur GitHub","text":"👉 À vous de jouer !Sur le site https://github.com/, se créer un compte GitHub (si vous hésitez, une convention courante est d’utiliser prénomnom comme nom d’utilisateur)Vous pouvez ensuite executer usethis::use_github() dans la console  et vous laisser guider.Ajouter un fichier “README.Rmd” à votre package afin de disposer d’une belle page\nd’accueil sur GitHub :\n3a. dans , executez la commande usethis::use_readme_rmd()\n3b. à l’aide de l’outils “Diff” de l’onglet “Git” de RStudio, étudier les changements opérés par la commande précédente\n3c. éditez le fichier “README.Rmd” créé, puis créer le fichier README.md correspondant en executant knitr (cliquer su la pelotte de laine “Knit” en haut à gauche dans Rstudio), avant d’effectuer un 3e commit contenant ces changements\n3d. à ce stade, si vous visitez la page de votre répertoire sur GitHub,\nvotre 3e commit n’apparait pour l’instant pas. Il faut synchroniser\nle répertoire GitHub en ligne avec votre dossier local. Pour cela, directement depuis RStudio, cliquer sur “Push” depuis l’onglet “Git”. Maintenant, les changements du 3e commit sont visibles en ligne sur GitHub.\n3a. dans , executez la commande usethis::use_readme_rmd()3b. à l’aide de l’outils “Diff” de l’onglet “Git” de RStudio, étudier les changements opérés par la commande précédente3c. éditez le fichier “README.Rmd” créé, puis créer le fichier README.md correspondant en executant knitr (cliquer su la pelotte de laine “Knit” en haut à gauche dans Rstudio), avant d’effectuer un 3e commit contenant ces changements3d. à ce stade, si vous visitez la page de votre répertoire sur GitHub,\nvotre 3e commit n’apparait pour l’instant pas. Il faut synchroniser\nle répertoire GitHub en ligne avec votre dossier local. Pour cela, directement depuis RStudio, cliquer sur “Push” depuis l’onglet “Git”. Maintenant, les changements du 3e commit sont visibles en ligne sur GitHub.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"collaboration-pour-la-production-du-code","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4 Collaboration pour la production du code","text":"git et GitHub sont particulièrement efficaces lorsque plusieurs personnes collaborent pour développer un code. En effet, chacun peut effectuer des pull et push successifs pour apporter des changements au code, de manière simultanée et en étant sûr de toujours travailler sur la dernière version. Nous allons voir différents concepts utiles dans le cas d’un tel travail\ncollaboratif.👉 À vous de jouer !En formant des groupes de 2, vous allez chacun ajouter votre binome comme “collaborator” à votre repertoire GitHub à partir de l’onglet “Settings” (sur GitHub).En formant des groupes de 2, vous allez chacun ajouter votre binome comme “collaborator” à votre repertoire GitHub à partir de l’onglet “Settings” (sur GitHub).Quelques instants plus tard le collaborateur ainsi ajouté reçoit un email l’invitant à accepter l’ajout. Cliquer sur le lien et accepter.Quelques instants plus tard le collaborateur ainsi ajouté reçoit un email l’invitant à accepter l’ajout. Cliquer sur le lien et accepter.Dans RStudio, créer un nouveau projet “Version control” à partir de l’url https du répertoire de votre binôme sur GitHub.Dans RStudio, créer un nouveau projet “Version control” à partir de l’url https du répertoire de votre binôme sur GitHub.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"branches","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.1 Branches","text":"Une des fonctionnalités assez utile de git est les branches. Cela permet d’opérer des changements importants dans le code sans perturber le fonctionnement actuel. C’est notamment utile pour explorer une piste de développement dont ne sait pas si elle sera concluante au final.D’ailleurs, vous utilisez déjà les branches depuis le depuis de cette partie. En effet, la branche par défaut est appelé “main” (ou parfois “master”).Grâce à ce système de branches, obtient un arbre des différents commits au cours du temps (où les nœuds correspondent à la séparations des branches).","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"merge","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.2 Merge","text":"Un pull se décompose en 2 actions de la part de git :tout d’abord un fetch, qui correspond au téléchargement du code en lignetout d’abord un fetch, qui correspond au téléchargement du code en lignesuivi d’un merge qui fusionne la version locale avec les changements.suivi d’un merge qui fusionne la version locale avec les changements.Après avoir conduit un développement expérimental dans une branche, peut vouloir merger ces\nchangements dans la branche “master” par exemple, après que l’expérience se soit révélée\nconcluante.Si un les changements concernent des parties distinctes du code, alors le merge peut\ns’effectuer sans problème. En revanche si les 2 versions à merger comportent des changements\ndepuis leur dernier commit commun qui concerne les mêmes lignes de codes, alors va rencontrer\nun (ou des ) conflit(s), qu’il va falloir résoudre.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"les-conflits","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.3 Les conflits","text":"Prenons l’exemple suivant : le développeur \\(D_1\\) et le développeur \\(D_2\\) tous les 2 pullé la version v0.1 du code à l’instant \\(t\\) sur leur machine respective. Ils travaillent chacun indépendamment pour apporter des changements au code. Au moment de pusher ses changements, le développeur \\(D_2\\) reçoit un message d’erreur :Chaque fichier à la source source d’un conflit alors été automatiquement édité comme suit :Pour résoudre le conflit, il faut alors éditer chaque fichier un à un en choisissant s’il faut conserver la version locale ou bien celle en ligne, avant de pouvoir commiter à nouveau et enfin de pusher vos changements avec succès.👉 À vous de jouer !Modifiez le fichier README.Rmd de votre binome, puis commitez votre changement et pushez le.une fois que votre binôme modifié votre README.Rmd, modifiez à votre tour le fichier à la même ligne, SANS puller les changements de votre binôme au préalable ! Commitez et essayez de pusher ces changements.Résolvez le conflit.NB: Dans la vraie vie, cherche à éviter cette situation et donc va toujours puller avant de pusher. Ici, nous faisons volontairement le contraire pour donner un exemple et démystifier les conflits.","code":"\"Sync Error.  \nPlease resolve all conflicted files, commit, then try syncing again.\"<<<<<<< HEAD\ncode dans votre version local\n=======\ncode en ligne\n>>>>>>> remote"},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"fork","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.4 Fork","text":"L’action fork permet de créer une copie qui vous appartient à partir d’un code disponible. Ainsi\nle code original ne sera pas impacté par vos changements. Cela revient à créer une branche, et la\nséparer de l’arbre pour pouvoir en assumer la propriété. aurait aussi pu appeler cette action une “bouture”…Cette action est principalement utile dans le cadre des pull requests.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"pull-request","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.5 Pull request","text":"Il s’agit du moyen le plus facile de proposer des changements dans un code dont vous n’êtes pas\ncollaborateur. GitHub propose une interface graphique facilitant leur traitement.👉 À vous de jouer !Modifiez le README.Rmd de votre voisin qui n’est pas votre binôme après avoir forké son\npackage.Modifiez le README.Rmd de votre voisin qui n’est pas votre binôme après avoir forké son\npackage.Proposez votre changement sous la forme d’une pull request depuis l’onglet “Pull requests” sur la page GitHub du répertoire de votre voisin.Proposez votre changement sous la forme d’une pull request depuis l’onglet “Pull requests” sur la page GitHub du répertoire de votre voisin.Acceptez la pull request de votre voisin sur la page GitHub de votre répertoire, puis faire le merge.Acceptez la pull request de votre voisin sur la page GitHub de votre répertoire, puis faire le merge.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"issues","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.4.6 Issues","text":"Pour n’importe quel répertoire GitHub, vous pouvez poster un commentaire sous forme d’issue\nafin d’alerter les développeurs sur un éventuel bug, ou une question sur l’utilisation du package,\nou encore demander une fonctionnalité supplémentaire…L’idéal est de proposer vous-même une pull request qui résout votre issue lorsque vous\nle pouvez (.e. en avez les capacités et le temps).👉 À vous de jouer !Utilisez usethis::use_github_links() afin d’ajouter les 2 lignes suivantes au fichier DESCRIPTION de votre packageURL: http://github.com/*prenom.nom*/mypkgBugReports: http://github.com/*prenom.nom*/mypkg/issuesUtilisez usethis::use_github_links() afin d’ajouter les 2 lignes suivantes au fichier DESCRIPTION de votre packageURL: http://github.com/*prenom.nom*/mypkgBugReports: http://github.com/*prenom.nom*/mypkg/issuesVisualisez les nouveau changements, puis commitez les.Visualisez les nouveau changements, puis commitez les.Créez une issue sur le projet de votre binomeCréez une issue sur le projet de votre binome","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"intégration-continue","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.5 Intégration continue","text":"À chaque changement, à chaque commit donc, il y la possibilité d’introduire 1 (ou plusieurs) bugs qui vont empêcher le package de passer le CRAN check. Si l’accumule trop de ces bugs, au moment de soumettre la nouvelle version, il peut y avoir beaucoup de corrections à apporter. C’est d’autant plus frustrant si le package passait le CRAN check auparavant…Les services d’intégration continue permettent de checker votre package automatiquement après chaque commit ! En cas d’échec, vous recevez un mail qui vous en informe. Un certain nombre de ces services proposent une offre limitée gratuite pour les projets open-source.Une autre raison d’utiliser l’intégration continue est qu’elle permet de tester votre package sur des infrastructures différentes de la votre (e.g. Windows, Ubuntu, Mac OS) et pour différentes versions de  (current, devel…)","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"github-actions","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.5.1 GitHub Actions","text":"Les GitHub Actions permettent de lancer des actions automatiquement à chaque fois que vous pushez sur GitHub La commande usethis::use_github_action(\"check-standard\") permet d’initialiser les Github Actions, et d’ajouter l’action R CMD CHECK du package.👉 À vous de jouer !Executer la commande usethis::use_github_action(\"check-standard\") et commiter les changements et regardez ce qu’il se passe sur la page GitHubExecuter la commande usethis::use_github_action(\"check-standard\") et commiter les changements et regardez ce qu’il se passe sur la page GitHubAjouter un badge à votre README.md grâce au code obtenu dans la console  et commiter ces changementsAjouter un badge à votre README.md grâce au code obtenu dans la console  et commiter ces changementsN’hésitez pas à consulter la page suivantes qui renseigne sur les différentes GitHub Actions disponibles pour les pacakges  : https://github.com/r-lib/actions/blob/v2-branch/examples/README.md","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"construire-et-déployer-simplement-un-site-web-pour-accompagner-son-package","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.6 Construire et déployer simplement un site web pour accompagner son package","text":"Le package pkgdown permet de générer automatiquement un site web attrayant rassemblant la documentation de votre package (y compris les Vignettes).👉 À vous de jouer !Executer la commande usethis::use_pkgdown() dans la console .Executer la commande usethis::use_pkgdown() dans la console .Commiter et pusher les changements. Rendez-vous sur l’onglet Actions de votre répertoire sur GitHub et constater les nouveautés.Commiter et pusher les changements. Rendez-vous sur l’onglet Actions de votre répertoire sur GitHub et constater les nouveautés.👉 À vous de jouer !Examiner les changement du fichier DESCRIPTION suite à l’execution des différentes commandes usethis::use_... précedemment.Modifier le champ URL du fichier DESCRIPTION.","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"références-additionnelles","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"2.7 Références additionnelles","text":"Happy Git R Jenny Bryan.Happy Git R Jenny Bryan.Jennifer Bryan (2018). Excuse , Moment Talk Version Control? American Statistician 72 (1):20–27.DOI: 10.1080/00031305.2017.1399928Jennifer Bryan (2018). Excuse , Moment Talk Version Control? American Statistician 72 (1):20–27.DOI: 10.1080/00031305.2017.1399928","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"annexe-2.1-r-hub","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"Annexe 2.1 : R-hub","text":"Le R consortium met à disposition le R-hub builder, – et pour ambition de pouvoir un jour proposer un service d’intégration continue spécialement dédié aux packages .R-hub builder utilise exactement la même infrasrtructure que les serveurs du CRAN, ce qui l’avantage de pouvoir reproduire exactement le R CMD CHECK tel qu’effectué par le CRAN. Il est possible de l’utiliser grâce à la fonction devtools::check_rhub().","code":""},{"path":"contrôle-de-version-avec-git-et-github-historique-de-changement-développement-collaboratif-et-intégration-continue.html","id":"annexe-2.2-couverture-du-code","chapter":"Chapitre 2 Contrôle de version avec git et GitHub: historique de changement, développement collaboratif et intégration continue","heading":"Annexe 2.2 : couverture du code","text":"Le package covr propose une solution pour mesurer la couverture des tests unitaires associés à un package. La couverture de test détermine la proportion du code source qui est effectivement utilisée lors de l’exécution des tests unitaires. La mesure de la couverture du code renforce la fiabilité d’un code et donne confiance à ses utilisateurs potentiels.👉 À vous de jouer !Executer la commande usethis::use_coverage(), ajouter un joli badge à votre README.md grâce au code obtenu dans la console .Commiter ces changements.Pour plus d’information n’hésitez pas à consulter la vignette de covr.","code":""},{"path":"mesurer-et-comparer-des-temps-dexécution.html","id":"mesurer-et-comparer-des-temps-dexécution","chapter":"Chapitre 3 Mesurer et comparer des temps d’exécution","heading":"Chapitre 3 Mesurer et comparer des temps d’exécution","text":"La première étape avant d’optimiser un code est de pouvoir mesurer son temps d’exécution, afin de pouvoir comparer les temps d’exécution entre différente implémentations.Pour plus de détails à propos du contenu de ce chapitre ainsi que du suivant, nous renvoyons au livre d’Hadley Wickham Advanced R 4, librement accessible en ligne.","code":""},{"path":"mesurer-et-comparer-des-temps-dexécution.html","id":"mesurer-des-temps-dexécution-avec-system.time","chapter":"Chapitre 3 Mesurer et comparer des temps d’exécution","heading":"3.1 Mesurer des temps d’exécution avec system.time()","text":"Pour mesurer le temps d’exécution d’une commande , peut utiliser la fonction system.time() comme ceci :Le problème qui apparaît sur cet exemple est que l’exécution est tellement\nrapide que system.time() affiche 0 (ou une valeur très proche).\nDe plus, voit qu’il y une certaine variabilité quand relance plusieurs\nfois la commande. Ceci rend la comparaison avec une autre implémentation (que l’espère) plus rapide pour le moins délicate.Ainsi si souhaite comparer notre code avec la fonction mvtnorm::dmvnorm(),\nne peut pas utiliser system.time() :pourrait se dire qu’il faut augmenter la complexité de notre calcul, mais\nil y mieux : utiliser le package microbenchmark !","code":"\nobs <- matrix(rep(1.96, 2), nrow=2, ncol=1)\nsystem.time(mvnpdf(x=obs, Log=FALSE))##    user  system elapsed \n##   0.001   0.000   0.004\nsystem.time(mvtnorm::dmvnorm(rep(1.96, 2)))##    user  system elapsed \n##   0.003   0.002   0.008"},{"path":"mesurer-et-comparer-des-temps-dexécution.html","id":"comparer-des-temps-dexécution-avec-microbenchmark","chapter":"Chapitre 3 Mesurer et comparer des temps d’exécution","heading":"3.2 Comparer des temps d’exécution avec microbenchmark()","text":"Comme son nom l’indique, ce package permet justement de comparer des temps\nd’exécution même quand ceux-ci sont très faibles. De plus, la fonction\nmicrobenchmark() va répéter un certain nombre de fois l’exécution des\ncommandes, ce qui va stabiliser son résultat.Les deux fonctions mvnpdf() et dmnvorm() étant capables de prendre en\nentrée une matrice, peut également comparer leurs comportements dans ce\ncas :Il s’est passé un quelque chose… Et va diagnostiquer ce problème dans le prochain chapitre.","code":"\nlibrary(microbenchmark)\nmb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),\n                     mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),\n                     times=1000L)## Warning in microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)), mvnpdf(x =\n## matrix(rep(1.96, : less accurate nanosecond times to avoid potential integer\n## overflows\nmb## Unit: microseconds\n##                                           expr    min     lq     mean median\n##                 mvtnorm::dmvnorm(rep(1.96, 2)) 20.254 21.402 23.26033 22.058\n##  mvnpdf(x = matrix(rep(1.96, 2)), Log = FALSE) 18.573 19.680 23.18177 20.213\n##      uq      max neval cld\n##  23.206   98.933  1000   a\n##  21.361 1767.346  1000   a\nn <- 100\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                       expr     min       lq\n##         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  23.698  24.9280\n##  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 267.935 274.9665\n##       mean   median      uq     max neval cld\n##   31.32277  26.4040  30.176 149.076   100  a \n##  285.65848 278.2875 284.376 458.339   100   b"},{"path":"profiler-son-code.html","id":"profiler-son-code","chapter":"Chapitre 4 Profiler son code","heading":"Chapitre 4 Profiler son code","text":"parle de profiling en anglais. Il s’agit de déterminer ce qui prend\ndu temps dans un code. Le étant, une fois trouvé le bloc de code qui prend\nle plus de temps dans l’exécution, d’optimiser uniquement cette brique.Pour obtenir un profiling du code ci-dessous, sélectionner les lignes de code\nd’intérêt et aller dans le menu “Profile” puis “Profile Selected Lines”. Cela utilise en fait la fonction profvis() du package profvis.OK, get ! Concaténer un vecteur au fur et à mesure dans une boucle\nn’est vraiment pas une bonne idée.","code":"\nn <- 10e4\npdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)"},{"path":"profiler-son-code.html","id":"comparaison-avec-une-version-plus-habile-de-mnvpdf","chapter":"Chapitre 4 Profiler son code","heading":"4.1 Comparaison avec une version plus habile de mnvpdf()","text":"Considérons une nouvelle version de mvnpdf(), appelée mvnpdfsmart(). Télécharger le fichier puis l’inclure dans votre package.Profiler la commande suivante :effectivement résolu le problème et apprend maintenant de manière plus\nfine ce qui prend du temps dans notre fonction.Pour confirmer que mvnpdfsmart() est effectivement bien plus rapide que\nmvnpdf() peut re-faire une comparaison avec microbenchmark() :Et peut également voir si devient compétitif avec dmvnorm() :Il y encore du travail…","code":"\nn <- 10e4\npdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)\nn <- 1000\nmb <- microbenchmark(mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: milliseconds\n##                                                            expr      min\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3.138591\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2.330481\n##        lq     mean   median       uq      max neval cld\n##  3.322681 3.778820 3.437030 3.580571 8.138008   100  a \n##  2.360309 2.447065 2.381362 2.425847 6.387636   100   b\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   43.747\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3147.857\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2308.546\n##         lq       mean   median       uq       max neval cld\n##    51.8445   73.05421   74.251   89.749   117.424   100 a  \n##  3295.1085 3715.51266 3416.387 3522.740  8054.737   100  b \n##  2348.0085 2504.66540 2379.497 2428.163 10087.189   100   c"},{"path":"profiler-son-code.html","id":"comparaison-avec-une-version-optimisée-dans","chapter":"Chapitre 4 Profiler son code","heading":"4.2 Comparaison avec une version optimisée dans ","text":"Boris est arrivé, après de longues recherches et plusieurs tests, à une\nversion optimisée avec les outils de .Inclure la fonction mvnpdfoptim() dans le package, puis profiler cette\nfonction :Et un petit microbenchmark() :Pour finir peut profiler la fonction dmvnorm() :","code":"\nn <- 10e4\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE))\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   43.337\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3154.499\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2314.450\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 1747.871\n##         lq       mean   median        uq      max neval  cld\n##    53.6075   73.60197   75.235   90.3025  142.680   100 a   \n##  3301.1970 3824.36479 3398.121 3571.4485 8685.276   100  b  \n##  2368.7135 2419.81877 2401.309 2434.4365 3397.875   100   c \n##  1794.3855 1922.38012 1828.580 1863.3475 6635.522   100    d\nn <- 10e5\nlibrary(mvtnorm)\nprofvis::profvis(dmvnorm(matrix(1.96, nrow = n, ncol = 2)))"},{"path":"rcpp-ou-comment-intégrer-facilement-du-code-cdans-un-package.html","id":"rcpp-ou-comment-intégrer-facilement-du-code-cdans-un-package","chapter":"Chapitre 5 Rcpp ou comment intégrer facilement du code C++dans un package ","heading":"Chapitre 5 Rcpp ou comment intégrer facilement du code C++dans un package ","text":"Rcpp (R-C-Plus-Plus) est un package qui facilite l’interface entre C++ et .  est un langage interprêté, ce qui facilite un certain nombre de choses (notamment nous donne accès à la console dans laquelle peut évaluer du code à la volée). Néanmoins, cette facilité d’utilisation se compense entre autre par des temps de calcul supérieurs à ceux de langages de plus bas niveau, tels que C, Fortran et C++ (mais qui nécessitent eux une compilation).dirigera le lecteur curieux vers le livre en ligne\nRcpp everyone de Masaki E. Tsuda, qui\nconstitue une ressource très complète pour comprendre l’utilisation de Rcpp en plus de\nl’introduction que l’peut trouver dans le livre Advanced R d’Hadley Wickham 5.","code":""},{"path":"rcpp-ou-comment-intégrer-facilement-du-code-cdans-un-package.html","id":"première-fonction-en-rcpp","chapter":"Chapitre 5 Rcpp ou comment intégrer facilement du code C++dans un package ","heading":"5.1 Première fonction en Rcpp","text":"vous de jouer !Afin de rendre votre package prêt pour l’utilisation avec Rcpp, commencez par executer la commande\nsuivante :Constatez les changements apportésComme mentionner dans la console, il faut également ajouter les 2 commentaires Roxygen suivants dans la page d’aide globale du package :Nous allons maintenant créer une première fonction en Rcpp permettant d’inverser une matrice.\nPour cela, nous allons nous appuyer sur la library C++ Armadillo.\nIl s’agit d’une library d’algèbre linéaire moderne et simple, hautement optimisée, et interfacée\navec  via le package RcppArmadillo.C++ n’est pas un langage très différent de . Les principales différences qui nous concernent :C++est très efficaces pour le boucles (y compris les boucles emboîtées). Attention :\nil y souvent un sens qui est plus rapide que l’autre (ceci est dû à la manière dont C++ attribue\net parcours la mémoire).C++est très efficaces pour le boucles (y compris les boucles emboîtées). Attention :\nil y souvent un sens qui est plus rapide que l’autre (ceci est dû à la manière dont C++ attribue\net parcours la mémoire).Chaque commande doit se terminer par un point virgule ;.Chaque commande doit se terminer par un point virgule ;.C++est un langage typé : il faut déclarer le type de chaque variable avant de pouvoir\nl’utiliser.C++est un langage typé : il faut déclarer le type de chaque variable avant de pouvoir\nl’utiliser.vous de jouer !Créez un nouveau fichier C++ depuis RStudio (via le menu File > New File > C++ File), et enregistrez le dans le dossier src. Prenez le temps de le lire et essayez de comprendre chaque ligne.Compilez et chargez votre package (via le bouton “Install Restart”) et essayez d’utiliser la fonction timesTwo() depuis la console.Installez le package RcppArmadillo, et n’oubliez pas de faire les ajouts nécessaires dans DESCRIPTION (cf. usethis::use_rcpp_armadillo())À l’aide de l’introduction à Rcpp de Hadley Wickham dans son livre Advanced R 6, ainsi que de la documentation du package RcppArmadillo et de celle de la library C++ Armadillo, tentez d’écrire une courte fonction invC en C++ calculant l’inverse d’une matrice.Lorsque vous avez réussi à compiler votre fonction invC et qu’elle est accessible depuis  créer une fonction mvnpdf_invC() à partir de l’implémentation de mvnpdfsmart en remplaçant uniquement les calculs d’inverse matriciel par un appel à invC.Evaluer le gain en performance de cette nouvelle implémentation mvnpdf_invC.","code":"```r\nusethis::use_rcpp()\n``````r\n#' @useDynLib mypkgr\n#' @importFrom Rcpp sourceCpp, .registration = TRUE\nNULL\n```\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     times=100L)\nmb\n## Unit: microseconds\n##                                                            expr      min\n##              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   44.198\n##       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3150.358\n##  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2329.251\n##  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 1763.984\n##  mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2316.746\n##        lq       mean   median       uq      max neval  cld\n##    55.842   75.18457   77.203   90.897  122.795   100 a   \n##  3287.462 3530.78511 3356.649 3490.576 9381.292   100  b  \n##  2363.015 2554.23973 2390.361 2435.851 7216.287   100   c \n##  1810.499 1979.80062 1848.157 1889.198 7138.059   100    d\n##  2353.584 2499.20133 2380.337 2433.658 6020.686   100   c\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 2, ncol = 1000), Log=FALSE))## Error in parse_rprof_lines(lines, expr_source): No parsing data available. Maybe your function was too fast?\nprofvis::profvis(mvnpdfoptim(x=matrix(1.96, \n    nrow = 100, ncol = 1000), Log=FALSE))"},{"path":"rcpp-ou-comment-intégrer-facilement-du-code-cdans-un-package.html","id":"optimisation-grâce-à-c","chapter":"Chapitre 5 Rcpp ou comment intégrer facilement du code C++dans un package ","heading":"5.2 Optimisation grâce à C++","text":"En règle générale, ne gagne pas beaucoup en temps de calcul en remplaçant une fonction \noptimisée par une fonction en C++. En effet, la plupart des fonctions de base de  s’appuie en\nréalité déjà sur des routines C ou Fortran bien optimisée. Le gain se limite alors simplement\nà la suppression des vérifications des arguments et de la gestion des différents types.vous de jouer !À partir de mvnpdfsmart, proposez une implémentation completement en C++ du calcul\nde densité de la loi Normale multivariée mvnpdfC().Evaluer le gain en performance de cette nouvelle implémentation mvnpdfCVous pouvez télécharger notre proposition de mvnpdfC.cpp ici.Pour un gain (relativement faible small) supplémentaire de temps de calcul (au prix d’un code plus difficile à lire), vous pouvez jettez un oeil à notre implémentation optimizée utilisant C++ et Armadillo dans le fichier mvnpdfoptimC.cpp.À noter que vous pouvez utiliser des fonctions Rcpp en dehors de l’architecture\nd’un package grâce à la fonction Rcpp::sourceCpp(). Mais, comme nous l’avons vu,\nil est préférable de gérer tous ses codes sous la forme de package : il est\ndonc peu probable que vous en ayez besoin !","code":"\nn <- 1000\nmb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n                     mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n                     mvnpdfsmartC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),\n                     mvnpdfoptimC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),\n                     times=100L)\nmb## Unit: microseconds\n##                                                                                                       expr\n##                                                         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##                                                  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                                             mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##  mvnpdfsmartC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0,      2), varcovM = diag(2), Log = FALSE)\n##  mvnpdfoptimC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0,      2), varcovM = diag(2), Log = FALSE)\n##       min        lq       mean    median        uq      max neval  cld\n##    44.362   57.2360   75.42319   77.8590   88.7035  113.365   100 a   \n##  3173.359 3297.3840 3516.53966 3380.4295 3508.6980 8638.864   100  b  \n##  2335.155 2370.7840 2451.90824 2397.0035 2427.5690 6993.452   100   c \n##  1765.337 1810.7240 2002.75488 1836.4720 1889.8950 6392.761   100    d\n##  2321.871 2358.7710 2565.19452 2385.4620 2421.3780 7517.391   100   c \n##    51.496   55.4320   61.39750   60.3725   65.6615   88.806   100 a   \n##    35.834   38.9295   45.58872   43.9315   50.8810  112.873   100 a"},{"path":"rcpp-ou-comment-intégrer-facilement-du-code-cdans-un-package.html","id":"annexe-5.1-loptimisation-prématurée-nest-pas-une-bonne-idée","chapter":"Chapitre 5 Rcpp ou comment intégrer facilement du code C++dans un package ","heading":"Annexe 5.1 : l’optimisation prématurée n’est pas une bonne idée","text":"Chambers, Software Data Analysis: Programming R, Springer, 2008 :“Including additional C code serious step, added dangers\noften substantial amount programming debugging required.\ngood reason.”","code":""},{"path":"parallélisation-du-code-r.html","id":"parallélisation-du-code-r","chapter":"Chapitre 6 Parallélisation du code R","heading":"Chapitre 6 Parallélisation du code R","text":"","code":""},{"path":"parallélisation-du-code-r.html","id":"introduction-à-lexecution-parallèle-sous-r","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.1 Introduction à l’execution parallèle sous R","text":"En dehors de l’optimisation du code et des algorithmes, une autre façon\nd’obtenir un code performant est de tirer profit des architectures parallèles\ndes ordinateurs modernes. Il s’agit alors de paralléliser son code afin de\nfaire des opérations simultanées sur des parties distinctes d’un même problème,\nen utilisant différent cœurs de calcul. ne réduit pas le temps de calcul\ntotal nécessaire, mais l’ensemble des opérations s’exécute plus rapidement.Il existe un nombre non négligeable d’algorithmes qui sont d’un “parallélisme\nembarrassant”, c’est-à-dire dont les calculs peuvent se décomposer en plusieurs\nsous-calculs indépendants. En statistique, il est ainsi souvent facile et direct\nde paralléliser selon les différentes observations ou selon les différentes\ndimensions. Typiquement, il s’agit d’opérations que l’peut écrire sous la\nforme de boucle dont les opérations sont indépendantes d’une itération de la\nboucle à l’autre.Les opérations nécessaires pour l’établissement d’un code parallèle sont les suivantes :Démarrer \\(m\\) processus “travailleurs” (.e. cœurs de calcul) et les initialiserDémarrer \\(m\\) processus “travailleurs” (.e. cœurs de calcul) et les initialiserEnvoyer les fonctions et données nécessaires pour chaque tache aux travailleursEnvoyer les fonctions et données nécessaires pour chaque tache aux travailleursSéparer les taches en \\(m\\) opérations d’envergure similaire et les envoyer aux travailleursSéparer les taches en \\(m\\) opérations d’envergure similaire et les envoyer aux travailleursAttendre que tous les travailleurs aient terminer leurs calculs et obtenir leurs résultatsAttendre que tous les travailleurs aient terminer leurs calculs et obtenir leurs résultatsRassembler les résultats des différents travailleursRassembler les résultats des différents travailleursArrêter les processus travailleursArrêter les processus travailleursSelon les plateformes, plusieurs protocoles de communications sont disponibles\nentre les cœurs. Sous les systèmes UNIX, le protocole Fork est le plus\nutilisé, mais il n’est pas disponible sous Windows où utilise\npréférentiellement le protocole PSOCK. Enfin, pour les architecture de calcul\ndistribuée où les cœurs ne se trouvent pas nécessairement sur le même processeur\nphysique, utilise généralement le protocole MPI. L’avantage des packages\nfuture et future.apply est que le même code pourra être exécuté quelque soit\nla configuration matérielle.Il existe un nombre important de packages et d’initiatives permettant de faire\ndu calcul en R. Depuis R 2.14.0, le package\nparallel\nest inclus directement dans R et permet de démarrer et d’arrêter un “cluster”\nde plusieurs processus travailleur (étape 1 et 6). En plus du package\nparallel, va donc utiliser le package future qui permet de gérer les\nprocessus travailleurs et la communication et l’articulation avec le package\nfuture.applyqui permet lui de gérer le dialogue avec les travailleurs (envois,\nréception et rassemblement des résultats - étapes 2, 3, 4 et 5).","code":""},{"path":"parallélisation-du-code-r.html","id":"première-fonction-parallèle-en-r","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.2 Première fonction parallèle en R","text":"À vous de jouer !Commencez par écrire une fonction simple qui calcule le logarithme de \\(n\\)\nnombres:Déterminez combien de coeurs sont disponibles sur votre marchine grâce à\nla fonction future::availableCores().Déterminez combien de coeurs sont disponibles sur votre marchine grâce à\nla fonction future::availableCores().À l’aide de la fonction future::plan(multisession(workers = XX)),\ndéclarez un “plan” de calculs parallèles sur votre ordinateur (en prenant garde\nà laisser un coeur disponible pour traiter les autres processus).À l’aide de la fonction future::plan(multisession(workers = XX)),\ndéclarez un “plan” de calculs parallèles sur votre ordinateur (en prenant garde\nà laisser un coeur disponible pour traiter les autres processus).À l’aide d’une fonction de type apply future.apply::future_*apply(),\ncalculez le log des \\(n\\) nombres en parallèle et concaténez les résultats dans un\nvecteur.À l’aide d’une fonction de type apply future.apply::future_*apply(),\ncalculez le log des \\(n\\) nombres en parallèle et concaténez les résultats dans un\nvecteur.Comparez le temps d’éxecution avec celui d’une fonction séquentielle\nsur les 100 premiers entiers, grâce à la commande :microbenchmark(log_par(1:100), log_seq(1:100), times=10)Comparez le temps d’éxecution avec celui d’une fonction séquentielle\nsur les 100 premiers entiers, grâce à la commande :microbenchmark(log_par(1:100), log_seq(1:100), times=10)La version parallèle tourne beaucoup plus lentement… Car en fait, si les\ntâches individuelles sont trop rapides, R va passer plus de temps à\ncommuniquer avec les cœurs, qu’à faire les calculs effectifs.Il faut qu’une itération de la boucle soit relativement longue pour que le\ncalcul parallèle apporte un gain en temps de calcul !En augmentant \\(n\\), observe une réduction de la différence entre les 2\nimplémentations (le temps de calcul en parallèle augmente très lentement comparé\nà l’augmentation de celui de la fonction séquentielle).NB : les itérateurs d’itertools sont très performants mais ne peuvent\nservir que lorsque le code à l’intérieur de future_*apply() est vectorisé (il\nest toujours possible de vectoriser le code à l’intérieur, par exemple avec une\nfonction de type apply). Ils minimisent le nombre de communication entre les\ncoeurs.","code":"\nlibrary(microbenchmark)\nlibrary(future.apply)\n\nlog_seq <- function(x){\n  # try this yourself (spoiler alert: it is quite long...):\n  # res <- numeric(length(x))\n  # for(i in 1:length(x)){\n  #   res[i] <- log(x[i])\n  # }\n  # return(res)\n  return(log(x))\n}\n\nlog_par <- function(x){\n  res <- future_sapply(1:length(x), FUN = function(i) {\n    log(x[i])\n  })\n  return(res)\n}\n\nplan(multisession(workers = 3))\nmb <- microbenchmark(log_par(1:100), log_seq(1:100), times = 50)"},{"path":"parallélisation-du-code-r.html","id":"parallélisation-efficace","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.3 Parallélisation efficace","text":"va maintenant se pencher sur un autre cas d’utilisation. Imaginons que l’\nait un grand tableau de données de taille comportant 10 observations pour 100\n000 variables (e.g. des mesures de génomique), et que l’veuille calculer la\nmédiane pour chacune de ces variables.Pour un utilisateur averti de R, une telle opération se programme facilement\nà l’aide de la fonction apply :En réalité, une boucle n’est pas plus lente à condition d’être bien\nprogrammée :À vous de jouer !\nEssayez d’améliorer encore ce temps de calcul en parallélisant :Parallélisez le calcul de la médiane de chacune des 100 000 variables.\nObserve-t-un gain en temps de calcul ?Parallélisez le calcul de la médiane de chacune des 100 000 variables.\nObserve-t-un gain en temps de calcul ?Proposez une implémentation alternative grâce à la fonction\nitertools::isplitIndices() qui permet de séparer vos données (les \\(n\\) nombres)\nen autant de groupes que vous avez de coeurs. Comparez à nouveau les temps de\ncalcul.Proposez une implémentation alternative grâce à la fonction\nitertools::isplitIndices() qui permet de séparer vos données (les \\(n\\) nombres)\nen autant de groupes que vous avez de coeurs. Comparez à nouveau les temps de\ncalcul.","code":"\nx <- matrix(rnorm(1e6), nrow = 10)\ndim(x)## [1]     10 100000\ncolmedian_apply <- function(x){\n  return(apply(x, 2, median))\n}\nsystem.time(colmedian_apply(x))##    user  system elapsed \n##   1.659   0.009   1.673\ncolmedian_for <- function(x){\n  ans <- rep(0, ncol(x)) \n  for (i in 1:ncol(x)) {\n    ans[i] <- median(x[, i]) \n  }\n  return(ans)\n}\nsystem.time(colmedian_for(x))##    user  system elapsed \n##   1.497   0.006   1.504\ncolmedian_par <- function(x){\n  res <- future_sapply(1:ncol(x), FUN = function(i) {\n          median(x[, i])\n    })\n  return(res)\n}\nplan(multisession(workers = 3))\nsystem.time(colmedian_par(x))##    user  system elapsed \n##   0.129   0.017   0.905\ncolmedian_parIter <- function(x, ncores = 1){\n  iter <- itertools::isplitIndices(n = ncol(x), chunks = ncores)\n  res <- future_sapply(iter, FUN = function(i) {\n          apply(x[, i], 2, median)\n    })\n  return(unlist(res))\n}\nsystem.time(colmedian_parIter(x, ncores = 3))##    user  system elapsed \n##   0.066   0.012   0.696\nmb <- microbenchmark(colmedian_apply(x), \n                     colmedian_for(x),\n                     colmedian_par(x),\n                     colmedian_parIter(x, ncores = 3), times = 10)\nmb## Unit: milliseconds\n##                              expr       min        lq      mean    median\n##                colmedian_apply(x) 1518.1346 1541.9574 1568.2892 1568.3977\n##                  colmedian_for(x) 1474.2957 1495.8790 1531.8657 1518.1458\n##                  colmedian_par(x)  708.0211  712.8069  731.6481  719.7465\n##  colmedian_parIter(x, ncores = 3)  606.6464  619.0144  639.6004  632.1714\n##         uq       max neval cld\n##  1578.2346 1633.0845    10 a  \n##  1548.6421 1648.4490    10 a  \n##   725.2583  854.5031    10  b \n##   648.3523  724.2790    10   c"},{"path":"parallélisation-du-code-r.html","id":"les-itérateurs","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.3.1 Les itérateurs","text":"Le package itertools permet de séparer facilement des données ou des\ntaches (étape 3) tout en minimisant les communications avec les différents\ntravailleurs. Il s’appuie sur une implémentation des itérateurs en R.\nSon utilisation nécessite néanmoins de vectoriser le code à l’intérieur de\nfuture_*apply(). Expérimentez avec le petit code ci-dessous :","code":"\nmyiter <- itertools::isplitIndices(n = 30, chunks = 3)\n\n# Une première fois\niterators::nextElem(myiter)##  [1]  1  2  3  4  5  6  7  8  9 10\n# Une deuxième fois... Oh ?!\niterators::nextElem(myiter)##  [1] 11 12 13 14 15 16 17 18 19 20\n# Encore !\niterators::nextElem(myiter)##  [1] 21 22 23 24 25 26 27 28 29 30\n# Encore ?\niterators::nextElem(myiter)## Error: StopIteration"},{"path":"parallélisation-du-code-r.html","id":"les-autres-plans-de-calculs-parallèle","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.3.2 Les autres “plans” de calculs parallèle","text":"Pour exécuter votre code (exactement le même code, c’est un des avantages\ndu packages de la famille future*), vous devez régler un “plan” de calculs :sur un ordinateur (ou un unique serveur de calcul) sous Unix (Linux, Mac OS),\nvous pouvez utiliser plan(multicore(workers = XX)) qui est souvent plus\nperformant. Le plan multisession fonctionne toujours.sur un ordinateur (ou un unique serveur de calcul) sous Unix (Linux, Mac OS),\nvous pouvez utiliser plan(multicore(workers = XX)) qui est souvent plus\nperformant. Le plan multisession fonctionne toujours.sur un cluster de calculs (type Avakas à Bordeaux), nous renvoyons au package\nfuture.batchtoolssur un cluster de calculs (type Avakas à Bordeaux), nous renvoyons au package\nfuture.batchtools","code":""},{"path":"parallélisation-du-code-r.html","id":"parallélisation-dans-notre-exemple-fil-rouge","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.4 Parallélisation dans notre exemple fil rouge","text":"À vous de jouer !À partir de la fonction mvnpdfoptim() et/ou mvnpdfsmart(), proposez\nune implémentation parallélisant les calculs sur les observations (colonnes de \\(x\\))À partir de la fonction mvnpdfoptim() et/ou mvnpdfsmart(), proposez\nune implémentation parallélisant les calculs sur les observations (colonnes de \\(x\\))Comparez les temps de calcul sur 10 000 observationsComparez les temps de calcul sur 10 000 observationsNotre proposition d’implementation pour mvnpdfoptim_par est téléchargeable ici.","code":"\nplan(multisession(workers = 3))\nn <- 10000\nmb <- microbenchmark::microbenchmark(\n  mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),\n  mypkgr::mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  mypkgr::mvnpdfoptim_par(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),\n  mypkgr::mvnpdfoptim_parIter(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE, ncores = 3),\n  times=20L)\nmb## Unit: microseconds\n##                                                                                             expr\n##                                               mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))\n##                           mypkgr::mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE)\n##                  mypkgr::mvnpdfoptim_par(x = matrix(1.96, nrow = 2, ncol = n),      Log = FALSE)\n##  mypkgr::mvnpdfoptim_parIter(x = matrix(1.96, nrow = 2, ncol = n),      Log = FALSE, ncores = 3)\n##        min         lq       mean    median       uq        max neval cld\n##    231.035   277.0985   298.4574   293.601   309.14    413.239    20  a \n##  17897.976 18047.4005 19202.7293 18361.993 19917.92  22561.972    20  a \n##  40055.852 41174.2910 53677.7986 41733.715 43496.14 270043.138    20   b\n##  41021.648 41606.4925 43428.8953 42418.005 44911.07  49199.057    20   b"},{"path":"parallélisation-du-code-r.html","id":"conclusion","chapter":"Chapitre 6 Parallélisation du code R","heading":"6.5 Conclusion","text":"La parallélisation permet de gagner du temps, mais il faut d’abord bien\noptimiser son code. Quand parallélise un code, le gain sur la durée\nd’exécution dépend avant tout du ratio entre le temps de communication et le\ntemps de calcul effectif pour chaque tache.","code":""},{"path":"take-home-message.html","id":"take-home-message","chapter":"Chapitre 7 Take Home message","heading":"Chapitre 7 Take Home message","text":"FAITES DES PACKAGESFAITES DES PACKAGESutilisez git, au moins pour vous en localutilisez git, au moins pour vous en localsi besoin (.e. après optimisation du code R lui même), n’ayez pas peur de vous tourner vers Rcpp et/ou la\nparallélisation de votre codesi besoin (.e. après optimisation du code R lui même), n’ayez pas peur de vous tourner vers Rcpp et/ou la\nparallélisation de votre code","code":""},{"path":"références.html","id":"références","chapter":"Références","heading":"Références","text":"Les livres en ligne d’Hadley Wickham sont vraiment excellents et contiennent beaucoup de compléments et de détails par rapport à tout ce que l’traité durant cette formation :le site sur la construction de package R packages.le site sur la construction de package R packages.le site Advanced R pour tout ce qui concerne l’optimisation, Rcpp, ou encore le calcul parallèle.le site Advanced R pour tout ce qui concerne l’optimisation, Rcpp, ou encore le calcul parallèle.le site R Data Science est également très complet et comprend des chapitres sur la gestion des structures de données dans , mais aussi la modélisation ainsi que des éléments sur les graphiques et Quarto.le site R Data Science est également très complet et comprend des chapitres sur la gestion des structures de données dans , mais aussi la modélisation ainsi que des éléments sur les graphiques et Quarto.le livre en ligne Rcpp everyone de Masaki E. Tsuda est également très bien.le livre en ligne Rcpp everyone de Masaki E. Tsuda est également très bien.","code":""}]
